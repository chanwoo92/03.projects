# -*- coding: utf-8 -*-
"""머신러닝_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Or2cex1kxaegjM0ZoU5e2MLr8QteOn0n
"""

from google.colab import drive
drive.mount("/content/gdive")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdive/MyDrive/Colab Notebooks/stdcode2024/codeset

import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn import ensemble
from sklearn.tree import plot_tree

# 모델 정확도 라이브러리 선언
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

# CSV 파일을 읽어 DataFrame 변수에 저장하기
fdata = pd.read_csv("../dataset_out/Property_df.csv")
fdata["year"] = fdata['Year/Month'].str[:4]
fdata['year']=fdata['year'].astype("int")
fdata.dtypes

corrDf = fdata.corr(numeric_only=True)
corrDf

featuresStd = 0.5
label = '금리'
features = list(corrDf [ (abs(corrDf[label]) > featuresStd) &
                              (abs(corrDf[label]) != 1)].index)
features

splitRatio = 0.8
stdYear = int(fdata["year"].min() + (fdata["year"].max()-fdata["year"].min())*splitRatio)
stdYear

trainingDataFeatures = fdata.loc[ fdata.year <= stdYear, features ]
trainingDataLabel = fdata.loc[ fdata.year <= stdYear, label ]
testDataFeatures = fdata.loc[ fdata.year > stdYear, features ]
testDataLabel = fdata.loc[ fdata.year > stdYear, label ]

# model : DecisionTree
modelDt = tree.DecisionTreeRegressor(random_state=10)
fittedDtModel = modelDt.fit(trainingDataFeatures,
                            trainingDataLabel )
# model : RandomForest
modelRf = ensemble.RandomForestRegressor(random_state=10)
fittedRfModel = modelRf.fit(trainingDataFeatures,
                            trainingDataLabel )

print(trainingDataFeatures.shape)
print(trainingDataLabel.shape)
print(testDataFeatures.shape)
print(testDataLabel.shape)

# dt모델 예측 정확도
mae_dt = mean_absolute_error(testDataLabel, predictValueDt)
mse_dt = mean_squared_error(testDataLabel, predictValueDt)
rmse_dt = np.sqrt(mse_dt)
accuracy_dt = fittedDtModel.score(testDataFeatures, testDataLabel)
accuracy_dt_per = (accuracy_dt*100) - (accuracy_dt*100)%0.01

print(f"MSE DT: {mae_dt}")
print(f"MSE DT: {mse_dt}")
print(f"RMSE DT: {rmse_dt}")
print(f"Accuracy DT: {accuracy_dt_per}%")

# rf모델 예측 정확도
mae_rf = mean_absolute_error(testDataLabel, predictValueRf)
mse_rf = mean_squared_error(testDataLabel, predictValueRf)
rmse_rf = np.sqrt(mse_rf)
accuracy_rf = fittedRfModel.score(testDataFeatures, testDataLabel)
accuracy_rt_per = (accuracy_rf*100) - (accuracy_rf*100)%0.01

print(f"MSE RF: {mae_rf}")
print(f"MSE RF: {mse_rf}")
print(f"RMSE RF: {rmse_rf}")
print(f"Accuracy RF: {accuracy_rt_per}%")